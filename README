The problem at hand was to create an employee personnel database, one a business might use for example.  The database needed 7 functional commands, new employee, compute paychecks, raise wages, print records, download data, upload data, and quit.  By creating a new employee, the user could enter the employee's name, then choose either hourly or salary, then enter either's amount.  After creating an employee, the user would then be shows the main menu again, and could carry out any of the other commands.  by computing the employees paychecks, the user could enter how many hours said employee worked for the week.  40 hours would be counted as normal wage, then any additional hours would count as 1.5 x the normal employees wage.  the user would be shown the main menu again.  if the user desired to raise wages, the user would be prompted to enter a percent to raise the wages by.  then the program would print out the new wages, then the user would be brought back to the main menu.  the user could print the employee records, which would display each employees name followed by their salary or hourly pay.  by selecting the download data command, all of the entered employee data would be sent to an external called employee.dat.  This function is meant to be done at the end of the work day, and assumes the user would quit after doing so.  The next command, upload data, is meant to be done at the beginning of the work day.  This function imports all of the employee data back into the program.  Then the user could add more employees, raise wages, etc.  finally, the last command is the quit command, which merely exits the program.  

For this program, three different classes were utilized: Employee, HourlyEmployee, and SalariedEmployee.  Employee is the parent class and holds two variables, the employees name and their wage.  This class includes getter and setter methods for the employees name and wage, as well as an increase wage method, which takes in a double parameter representing the percent at which the user would like to increase the wages by.  this method divides the entered percent by 100 to get the correct decimal, then multiplies this decimal by the wage.  the wage is then added to this new value, represented as the payIncrease, to set the new wage.  Finally, this class contains an abstract methos called computePay which is meant for the child classes to fill in.

The HourlyEmployee class is intended for the entered employees who earn wages compared to a salary.  this class sends the name and the wage back to the parent, as well as fill in the computePay method with one constructor, the hours the employee worked.  This method also contains a toString() method which utilizes methods from the provided Utilities class to prent out the employee data.  

The SalariedEmployee class is a bit different than the HourlyEmployee class. This class takes in a salary as a constructor rather than a wage, so this number has to be divided by 40 and by 52 to be passed back to the parent class as a wage compared to a salary.  This class contains an additional two methods from the HourlyEmployee class, getSalary() and setSalaey().  The getSalary() method utilizes the parent getWage() method and multiplies this value by 40 and 52 to return the salary.  the setSalary() method sets the class variable to a new entered value.  For the computePay for this class, the getWage() is multiplied by a base hour count of 40, as the assignment prompts this method to account for 1/52 of the annual asalary.  The toString works the same as the other class.

This program contains 13 different methods to compute all tasks.  The main method consists of only two lines, one to initialize an arrayList of Employee type, and another to call upon the driver program which takes in the arrayList as a parameter.  The driver program calls upon two methods, the first is the method that prints out the main menu, and the other is the one that prompts the user to enter in which command they would like to carry out, called enterCommand(arraylist parameter).  this method utilizes a switch statement for each of the possible commands, as well as a default case that is carried out if the user does not select an applicable choice.  Besides the default case, each of the other cases calls upon a method with a name corresponding to the chosen command.  for example, case "n" calls upon a method called commandN(arraylist parameter). Each one of the unique command methods carry out the desired function.  Some of the methods call upon other methods to aid in the robustness of the program, such as calling upon a different program that prompts the user to keep entering values for the salary until an only numbers are entered, instead of the program crashing when letters are entered.

Each of the classes implement Serializable.  This means that when the employee records are sent to the employee.dat file, the employee objects are converted into byte stream so that the information is basically encripted.  the vice versa occurs when the data is pulled back into the program.
